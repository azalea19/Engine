#version 400

in vec2 UV;

out vec4 fragColor;

uniform sampler2D renderedTexture;
uniform float time;

//void main()
//{
	//color = texture( renderedTexture, UV + 0.005*vec2( sin(time+1024.0*UV.x),cos(time+768.0*UV.y)) ).xyz;
	//color = texture(renderedTexture, UV);

//}

 
 
// This is the value that needs to be added(subtracted) to a 
// texture point to get the next(previous) pixel in the X direction
// This value can be calculated as 1/texturewidth
float uXPixelDistance = 1.0/1024.0;
 
// This is the value that needs to be added(subtracted) to a
// texture point to get the next(previous) pixel in the Y direction
// This value can be calculated as 1/textureheight
float uYPixelDistance = 1.0/768.0;
 
// How to jump to next pixel, 1 means the very next pixel,
// 2 means the 2th pixel, and so on.
const float jump = 1.0f;
 
// Number of points around the current point
const float pointRange = 10.0f;
 
void main() 
{
    vec4 color = vec4(0, 0, 0, 0);
    vec2 point;
    int count = 0;
  
    // Calculate the total color intensity around the pixel
    // In this case we are calculating pixel intensity around 10 pixels
    for(float u = -pointRange; u < pointRange ; u+=jump) 
	{
        for(float v = -pointRange ; v < pointRange ; v+=jump) 
		{
            point.x = UV.x  + u * uXPixelDistance;
            point.y = UV.y  + v * uYPixelDistance;
             
            // If the point is within the range[0, 1]
            if (point.y >= 0.0f && point.x >= 0.0f &&
                point.y <= 1.0f && point.x <= 1.0f ) 
				{
                ++count;
                color += texture2D(renderedTexture, point.xy);
            }
        }
    }
     
    // Take the average intensity for the region
    color = color / float(count);
  
    fragColor = vec4(color.xyz, 1.0f);
}


